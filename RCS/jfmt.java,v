head	1.15;
access;
symbols;
locks;
comment	@# @;


1.15
date	2014.01.16.21.23.12;	author -;	state -;
branches;
next	1.14;

1.14
date	2014.01.16.21.22.09;	author -;	state -;
branches;
next	1.13;

1.13
date	2014.01.16.21.12.07;	author -;	state -;
branches;
next	1.12;

1.12
date	2014.01.16.21.00.41;	author -;	state -;
branches;
next	1.11;

1.11
date	2014.01.15.22.54.53;	author -;	state -;
branches;
next	1.10;

1.10
date	2014.01.15.22.34.29;	author -;	state -;
branches;
next	1.9;

1.9
date	2014.01.15.22.31.54;	author -;	state -;
branches;
next	1.8;

1.8
date	2014.01.15.22.24.18;	author -;	state -;
branches;
next	1.7;

1.7
date	2014.01.15.22.21.27;	author -;	state -;
branches;
next	1.6;

1.6
date	2014.01.15.06.13.43;	author -;	state -;
branches;
next	1.5;

1.5
date	2014.01.15.05.55.26;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.01.14.23.19.46;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.01.14.23.15.33;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.01.14.23.12.29;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.01.14.20.31.12;	author -;	state -;
branches;
next	;


desc
@@


1.15
log
@-
@
text
@// $Id: jfmt.java,v 1.14 2014-01-16 13:22:09-08 - - $
//
// Patrick Russell
// pcrussel
//
// This program is similar to the example code jcat.java,
// which iterates over all of its input files, except
// that this program shows how to use String.split to 
// extract non-whitespace sequences of characters
// from each line.
//

import java.io.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;
import static java.lang.System.*;

class jfmt {
   // Static variables keeping the general status of the program.
   public static final String JAR_NAME = get_jarname();
   public static final int EXIT_SUCCESS = 0;
   public static final int EXIT_FAILURE = 1;
   public static int exit_status = EXIT_SUCCESS;

   // A basename is the final component of a pathname.
   // If a java program is run from a jar, the classpath is the
   // pathname of the jar.
   static String get_jarname() {
      String jarpath = getProperty ("java.class.path");
      int lastslash = jarpath.lastIndexOf ('/');
      if (lastslash < 0) return jarpath;
      return jarpath.substring (lastslash + 1);
   }


   // Formats a single file.
   static void format (int wrapL, Scanner infile) {
      wrapL = -wrapL;
      // Read each line from the opened file, one after the other.
      // Stop the loop at end of file.
      for (int linenr = 1; infile.hasNextLine(); ++linenr) {
         String line = infile.nextLine();
         // Create a LinkedList of Strings.
         List<String> words = new LinkedList<String>();

         // Split the line into words around white space and iterate
         // over the words.
         for (String word: line.split ("\\s+")) {

            // Skip an empty word if such is found.
            if (word.length() == 0) continue;
            // Append the word to the end of the linked list.
            words.add (word);

         }
         //Use print_paragraph to print words
         print_paragraph(wrapL, words);
      }
   }

   //Prints the paragraph
   static void print_paragraph (int wrapL, List<String> words){
      //Count the total length of characters per line
      //stands for lineTotalLength
      int lineTotalL = 0;
      for (String word: words) {
         lineTotalL += word.length() + 1;
         //for the word wrap, count the length
         //of each word, compare to the input
         //wrapLength
         if (lineTotalL <= wrapL) {
            out.printf (" %s", word );
         }else if(lineTotalL > wrapL){
            out.printf ("%n", word );
            out.printf (word);
            lineTotalL = 0;
         }
      }
      out.printf("%n");
   }



   // Main function scans arguments and opens/closes files.
   public static void main (String[] args) {
      int wrapL = -65;

      if (args.length == 0) {
         // There are no filenames given on the command line.
         out.printf ("FILE: -%n");
         format (wrapL, new Scanner (in));
      }else {
         // Iterate over each filename given on the command line.
         for (int argix = 0; argix < args.length; ++argix) {
            String filename = args[argix];
            if (filename.startsWith("-")){
               //Means the file is a number
               wrapL = Integer.parseInt(filename);
            }else if (filename.equals ("-")) {
               // Treat a filename of "-" to mean System.in.
               out.printf ("FILE: -%n");
               format (wrapL, new Scanner (in));
            }else {
               // If a wrap number is specified, uses it.
               // If not, uses default 65             
	       // Open the file and read it, or error out.
               try {
                  Scanner infile = new Scanner (new File (filename));
                  out.printf ("FILE: %s%n", filename);
                  format (wrapL, infile);
                  infile.close();
               }catch (IOException error) {
                  exit_status = EXIT_FAILURE;
                  err.printf ("%s: %s%n", JAR_NAME,
                              error.getMessage());
               }
            }
         }
      }
      exit (exit_status);
   }
}
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: jfmt.java,v 1.13 2014-01-16 13:12:07-08 - - $
d68 1
a68 1
         lineTotalL += word.length();
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: jfmt.java,v 1.12 2014-01-16 13:00:41-08 - - $
d6 4
a9 4
// Starter code for the jfmt utility.  This program is similar
// to the example code jcat.java, which iterates over all of its
// input files, except that this program shows how to use
// String.split to extract non-whitespace sequences of characters
a39 2
      //To see if wrapL works
      out.printf("wrapL is: " + wrapL);
a43 2
        // out.printf ("line %3d: [%s]%n", linenr, line);

a52 1
            //out.printf ("%s", word);
d57 1
a57 1
        //out.printf ("%n");
a58 3
        // Use iterator syntax to print out all of the words.
        // for (String word: words) out.printf (" %s", word);
        // out.printf ("%n");
d62 1
d64 2
d69 3
a71 2
         //for the basic word wrap, count the length
         //of each word
a78 1
        // out.printf(word);
d106 1
a106 4
               // If not, uses default 65
               //try {
                 // wrapL = Integer.parseInt(filename);
               //}catch (NumberFormatException error){              
a122 1

@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: jfmt.java,v 1.11 2014-01-15 14:54:53-08 - - $
d77 1
a77 1
            out.printf (" %s", word);
d79 2
a80 1
            out.printf (" %n", word);
d83 1
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: jfmt.java,v 1.10 2014-01-15 14:34:29-08 - - $
d73 9
a81 1
         out.printf (" %s", word);
d121 2
a122 2
                 // err.printf ("%s: %s%n", JAR_NAME,
                   //           error.getMessage());
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: jfmt.java,v 1.9 2014-01-15 14:31:54-08 - - $
a38 1
      int totalLine = 0;
d62 7
a68 1
         //out.printf ("%n");
d70 4
a73 3
         // Use iterator syntax to print out all of the words.
         for (String word: words) out.printf (" %s", word);
         out.printf ("%n");
d75 1
d78 1
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: jfmt.java,v 1.8 2014-01-15 14:24:18-08 - - $
d40 1
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: jfmt.java,v 1.7 2014-01-15 14:21:27-08 - - $
d73 1
a73 1
      int wrapL = 65;
d93 4
a97 4
                  wrapL = Integer.parseInt(filename);
               }catch (NumberFormatException error){              
	       // Open the file and read it, or error out.
               }try {
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: jfmt.java,v 1.6 2014-01-14 22:13:43-08 - - $
d83 1
a83 1
            //if (filename.startsWith("-")){
d85 2
a86 2
              // wrapL = Integer.parseInt(filename);
            if (filename.equals ("-")) {
d104 2
a105 2
                  err.printf ("%s: %s%n", JAR_NAME,
                              error.getMessage());
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: jfmt.java,v 1.5 2014-01-14 21:55:26-08 - - $
d83 1
a83 1
            if (filename.startsWith("-"){
d85 2
a86 2
               wrapL = Integer.parseInt(filename);
           }else if (filename.equals ("-")) {
d95 1
a95 3
               }catch (NumberFormatException error){
                  wrapL = 65;
               }                 
d97 1
a97 1
               try {
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: jfmt.java,v 1.4 2014-01-14 15:19:46-08 - - $
d38 4
a41 1
   static void format (Scanner infile) {
d78 1
a78 1
         format (new Scanner (in));
d83 4
a86 1
            if (filename.equals ("-")) {
d89 1
a89 1
               format (new Scanner (in));
d91 2
d94 4
a97 1
                  
d102 1
a102 1
                  format (infile);
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: jfmt.java,v 1.3 2014-01-14 15:15:33-08 - - $
d70 2
d85 3
a87 1
               // Open the file and read it, or error out.
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: jfmt.java,v 1.2 2014-01-14 15:12:29-08 - - $
d59 1
a59 1
         out.printf ("%n");
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: jfmt.java,v 1.1 2014-01-14 12:31:12-08 - - $
d54 1
a54 1
            out.printf ("%s", word);
@


1.1
log
@-
@
text
@d1 4
a4 1
// $Id: jfmt.java,v 1.2 2013-09-24 14:38:16-07 - - $
d43 1
a43 1
         out.printf ("line %3d: [%s]%n", linenr, line);
d54 1
a54 1
            out.printf ("...[%s]%n", word);
d59 1
a59 1
         out.printf ("list:");
@
